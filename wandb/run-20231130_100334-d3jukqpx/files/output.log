Model Architecture:
MAML(
  (feature): FCNet(
    (encoder): Sequential(
      (0): Sequential(
        (0): Linear_fw(in_features=1280, out_features=512, bias=True)
        (1): BatchNorm1d_fw(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.2, inplace=False)
      )
      (1): Sequential(
        (0): Linear_fw(in_features=512, out_features=512, bias=True)
        (1): BatchNorm1d_fw(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.2, inplace=False)
      )
    )
  )
  (classifier): Linear_fw(in_features=512, out_features=5, bias=True)
  (loss_fn): CrossEntropyLoss()
)
Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0
)
Error executing job with overrides: ['exp.name=prot_test1', 'method=maml', 'dataset=swissprot']
Traceback (most recent call last):
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 183, in <module>
    run()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\main.py", line 94, in decorated_main
    _run_hydra(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 394, in _run_hydra
    _run_app(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 457, in _run_app
    run_and_report(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 223, in run_and_report
    raise ex
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 220, in run_and_report
    return func()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\hydra.py", line 132, in run
    _ = ret.return_value
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\core\utils.py", line 260, in return_value
    raise self._return_value
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\core\utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 63, in run
    model = train(train_loader, val_loader, model, cfg)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 119, in train
    model.train_loop(epoch, train_loader, optimizer)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 135, in train_loop
    loss = self.set_forward_loss(x, y)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 98, in set_forward_loss
    scores = self.set_forward(x, y)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 73, in set_forward
    scores = self.forward(x_a_i)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 32, in forward
    out = self.feature.forward(x)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\backbones\fcnet.py", line 26, in forward
    x = self.encoder(x)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\container.py", line 217, in forward
    input = module(input)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\container.py", line 217, in forward
    input = module(input)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\backbones\blocks.py", line 146, in forward
    running_mean = torch.zeros(x.data.size()[1]).cuda()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\cuda\__init__.py", line 239, in _lazy_init
    raise AssertionError("Torch not compiled with CUDA enabled")
AssertionError: Torch not compiled with CUDA enabled
Traceback (most recent call last):
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 183, in <module>
    run()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\main.py", line 94, in decorated_main
    _run_hydra(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 394, in _run_hydra
    _run_app(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 457, in _run_app
    run_and_report(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 223, in run_and_report
    raise ex
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 220, in run_and_report
    return func()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\_internal\hydra.py", line 132, in run
    _ = ret.return_value
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\core\utils.py", line 260, in return_value
    raise self._return_value
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\hydra\core\utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 63, in run
    model = train(train_loader, val_loader, model, cfg)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\run.py", line 119, in train
    model.train_loop(epoch, train_loader, optimizer)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 135, in train_loop
    loss = self.set_forward_loss(x, y)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 98, in set_forward_loss
    scores = self.set_forward(x, y)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 73, in set_forward
    scores = self.forward(x_a_i)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\methods\maml.py", line 32, in forward
    out = self.feature.forward(x)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\backbones\fcnet.py", line 26, in forward
    x = self.encoder(x)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\container.py", line 217, in forward
    input = module(input)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\container.py", line 217, in forward
    input = module(input)
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Hp\Nextcloud\EPFL\Master 3\Deep Learning in Biomedicine\Projet\fewshotbench_v2\backbones\blocks.py", line 146, in forward
    running_mean = torch.zeros(x.data.size()[1]).cuda()
  File "C:\Users\Hp\Anaconda3\envs\fewshotbench\lib\site-packages\torch\cuda\__init__.py", line 239, in _lazy_init
    raise AssertionError("Torch not compiled with CUDA enabled")
AssertionError: Torch not compiled with CUDA enabled